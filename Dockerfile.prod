# 生产环境 Dockerfile
# 多阶段构建 - 优化镜像大小和安全性

# 第一阶段：构建应用
FROM node:18-alpine AS builder

# 设置工作目录
WORKDIR /app

# 接收构建参数（环境变量）
ARG NODE_ENV=production
ARG VITE_APP_ENV=production
ARG VITE_APP_TITLE
ARG VITE_APP_NAME
ARG VITE_APP_VERSION
ARG VITE_API_BASE_URL
ARG VITE_WS_URL
ARG VITE_ENABLE_MOCK
ARG VITE_ENABLE_DEVTOOLS
ARG VITE_LOG_LEVEL

# 将 ARG 转换为 ENV，以便 Vite 能够读取
ENV NODE_ENV=${NODE_ENV}
ENV VITE_APP_ENV=${VITE_APP_ENV}
ENV VITE_APP_TITLE=${VITE_APP_TITLE}
ENV VITE_APP_NAME=${VITE_APP_NAME}
ENV VITE_APP_VERSION=${VITE_APP_VERSION}
ENV VITE_API_BASE_URL=${VITE_API_BASE_URL}
ENV VITE_WS_URL=${VITE_WS_URL}
ENV VITE_ENABLE_MOCK=${VITE_ENABLE_MOCK}
ENV VITE_ENABLE_DEVTOOLS=${VITE_ENABLE_DEVTOOLS}
ENV VITE_LOG_LEVEL=${VITE_LOG_LEVEL}

# 复制 package.json 和 package-lock.json
COPY package*.json ./

# 安装所有依赖（包括 devDependencies，构建需要）
# 必须临时取消 NODE_ENV=production 以安装 devDependencies
RUN NODE_ENV=development npm ci && \
    npm cache clean --force

# 复制源代码
COPY . .

# 构建生产版本
RUN npm run build

# 第二阶段：生产运行环境
FROM nginx:1.25-alpine

# 维护者信息
LABEL maintainer="your-email@example.com"
LABEL version="1.0"
LABEL description="Fire Monitoring Dashboard - Production"

# 安装必要的工具和证书
RUN apk add --no-cache \
    ca-certificates \
    tzdata && \
    rm -rf /var/cache/apk/*

# 设置时区
ENV TZ=Asia/Shanghai
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# 创建非 root 用户运行 nginx（安全性考虑）
RUN addgroup -g 1001 -S nginx-user && \
    adduser -u 1001 -S nginx-user -G nginx-user

# 复制自定义 nginx 配置
COPY nginx.prod.conf /etc/nginx/conf.d/default.conf
COPY nginx.conf /etc/nginx/nginx.conf

# 从构建阶段复制构建产物
COPY --from=builder /app/dist /usr/share/nginx/html

# 设置文件权限
RUN chown -R nginx-user:nginx-user /usr/share/nginx/html && \
    chown -R nginx-user:nginx-user /var/cache/nginx && \
    chown -R nginx-user:nginx-user /var/log/nginx && \
    chmod -R 755 /usr/share/nginx/html

# 创建健康检查文件
RUN echo '{"status":"ok"}' > /usr/share/nginx/html/health

# 暴露端口
EXPOSE 80

# 健康检查
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --quiet --tries=1 --spider http://localhost/health || exit 1

# 切换到非 root 用户（注释掉，因为 nginx 需要 root 权限绑定 80 端口）
# USER nginx-user

# 启动 nginx
CMD ["nginx", "-g", "daemon off;"]

